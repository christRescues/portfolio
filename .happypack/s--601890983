var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

import React from 'react';
import { Sparklines, SparklinesLine, SparklinesReferenceLine } from 'react-sparklines';
import { round } from 'lodash/round';
import { sum } from 'lodash/sum';

function average(data) {
	return round(sum(data) / data.length);
}

var _ref = _jsx(SparklinesReferenceLine, {
	type: 'avg'
});

export default (function (props) {
	return _jsx('div', {}, void 0, _jsx(Sparklines, {
		height: 100,
		width: 100,
		data: props.data
	}, void 0, _jsx(SparklinesLine, {
		color: props.color
	}), _ref), _jsx('div', {}, void 0, average(props.data), ' ', props.units));
});