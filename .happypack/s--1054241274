'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _fetchWeather = require('../../../actions/fetchWeather');

var _redux = require('redux');

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _api = require('../../../api');

var _api2 = _interopRequireDefault(_api);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MyArea = function (_Component) {
	_inherits(MyArea, _Component);

	function MyArea(props) {
		_classCallCheck(this, MyArea);

		var _this = _possibleConstructorReturn(this, (MyArea.__proto__ || Object.getPrototypeOf(MyArea)).call(this, props));

		_this.state = { geo: '' };
		_this.onBtnClick = _this.onBtnClick.bind(_this);
		return _this;
	}

	_createClass(MyArea, [{
		key: 'onBtnClick',
		value: function onBtnClick() {
			var _this2 = this;

			navigator.geolocation.getCurrentPosition(function (position) {
				var lat = position.coords.latitude;
				var lng = position.coords.longitude;
				var ROOT_URL = 'https://maps.googleapis.com/maps/api/geocode/json?sensor=true&latlng=';
				var url = '' + ROOT_URL + lat + ',' + lng;
				var reqUrl = '' + _api2.default + url;
				_axios2.default.get(url).then(function (response) {
					var address = response.data.results[0].formatted_address;
					var end = address.slice(address.indexOf(',') + 2);
					var city = end.slice(0, end.indexOf(','));
					_this2.props.fetchWeather(city);
				}).catch(function (err) {
					console.log(err);
				});
			});
		}
	}, {
		key: 'render',
		value: function render() {
			return _jsx('div', {
				className: 'text-center'
			}, void 0, _jsx('button', {
				onClick: this.onBtnClick,
				id: 'locationBtn',
				className: 'btn btn-primary'
			}, void 0, 'Get your location\'s weather'));
		}
	}]);

	return MyArea;
}(_react.Component);

function mapDispatchToProps(dispatch) {
	return (0, _redux.bindActionCreators)({ fetchWeather: _fetchWeather.fetchWeather }, dispatch);
}

exports.default = (0, _reactRedux.connect)(null, mapDispatchToProps)(MyArea);