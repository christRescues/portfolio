'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _Game = require('./Game');

var _Game2 = _interopRequireDefault(_Game);

var _Modal = require('./Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _scroll = require('../../../helpers/scroll');

var _scroll2 = _interopRequireDefault(_scroll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  container: {
    marginBottom: '250px',
    marginTop: '50px'
  }
};

var Simon = function (_Component) {
  _inherits(Simon, _Component);

  function Simon(props) {
    _classCallCheck(this, Simon);

    var _this = _possibleConstructorReturn(this, (Simon.__proto__ || Object.getPrototypeOf(Simon)).call(this, props));

    _this.state = {
      on: false,
      round: '',
      colors: ['green', 'red', 'blue', 'yellow'],
      memorize: '',
      roundColors: [],
      clicks: 0,
      currentColor: '',
      cursor: 'not-allowed',
      strict: false,
      modal: false
    };
    _this.turnOnOff = _this.turnOnOff.bind(_this);
    _this.padClick = _this.padClick.bind(_this);
    _this.start = _this.start.bind(_this);
    _this.strict = _this.strict.bind(_this);
    _this.closeModal = _this.closeModal.bind(_this);
    return _this;
  }

  _createClass(Simon, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      (0, _scroll2.default)(document.getElementById("simonContainer"));
    }
  }, {
    key: 'turnOnOff',
    value: function turnOnOff() {
      this.setState({ on: !this.state.on });
      if (!this.state.on === false) {
        this.setState({
          round: '',
          memorize: '',
          roundColors: '',
          clicks: 0,
          currentColor: '',
          cursor: 'not-allowed',
          strict: false
        });
      } else if (!this.state.on === true) {
        this.setState({ round: 1 });
      }
    }
  }, {
    key: 'strict',
    value: function strict() {
      if (this.state.on === true) {
        this.setState({ strict: !this.state.strict });
      }
    }
  }, {
    key: 'beginRound',
    value: function beginRound(colorArr) {
      var _this2 = this;

      var i = 0;
      this.setState({
        memorize: colorArr[i],
        roundColors: colorArr,
        currentColor: colorArr[i],
        cursor: 'not-allowed'
      });
      i++;
      var loop = function loop() {

        setTimeout(function () {
          _this2.setState({
            memorize: colorArr[i],
            currentColor: colorArr[i]
          });
          var audio = document.getElementById('audio');
          audio.src = require('./' + colorArr[i - 1] + '.mp3');
          audio.play();

          if (i === colorArr.length) {
            _this2.setState({ cursor: 'pointer' });
          }

          i++;
          if (i < _this2.state.round + 1) {
            loop();
          }
        }, 1000);
      };
      loop();
    }
  }, {
    key: 'start',
    value: function start(round) {
      var colorArr = [];
      for (var i = 0; i < round; i++) {
        var rand = Math.floor(Math.random() * 4) + 0;
        colorArr.push(this.state.colors[rand]);
      }
      this.beginRound(colorArr);
    }
  }, {
    key: 'padClick',
    value: function padClick(e, color) {
      var _this3 = this;

      if (this.state.cursor === 'not-allowed') {
        e.preventDefault();
      } else {
        (function () {
          _this3.setState({
            clicks: _this3.state.clicks + 1,
            currentColor: color
          });
          var roundColors = _this3.state.roundColors;
          var round = _this3.state.round;

          var audio = document.getElementById('audio');
          audio.src = require('./' + color + '.mp3');
          audio.play();

          //handle wrong click
          if (roundColors[_this3.state.clicks] !== color) {
            var _audio = document.getElementById('audio');
            _audio.src = require('./buzz.mp3');
            _audio.play();
            if (_this3.state.strict === false) {
              _this3.setState({
                round: 0,
                clicks: 0
              });
              setTimeout(function () {
                _this3.setState({ round: round });
                _this3.beginRound(roundColors);
              }, 1000);
            } else {
              //if in strict mode
              _this3.setState({
                round: 0,
                clicks: 0
              });
              setTimeout(function () {
                _this3.setState({
                  round: 1,
                  memorize: '',
                  roundColors: '',
                  currentColor: '',
                  cursor: 'not-allowed'
                });
                _this3.start(1);
              }, 1000);
            }
          } else if (_this3.state.clicks === 19 && roundColors.length - 1 === _this3.state.clicks && roundColors[roundColors.length - 1] === color) {
            //Dectect win after 20 rounds
            _this3.setState({
              modal: true,
              clicks: 0,
              round: 1,
              memorize: '',
              roundColors: '',
              currentColor: '',
              cursor: 'not-allowed'
            });
          } else if (roundColors.length - 1 === _this3.state.clicks && roundColors[roundColors.length - 1] === color) {
            //detects if player is correct on last click
            _this3.setState({
              round: round + 1,
              clicks: 0
            });
            var rand = Math.floor(Math.random() * 4) + 0;
            var newColor = _this3.state.colors[rand];
            var newArr = [].concat(_toConsumableArray(_this3.state.roundColors), [newColor]);
            _this3.beginRound(newArr);
          }
        })();
      }
    }
  }, {
    key: 'closeModal',
    value: function closeModal() {
      this.setState({ modal: false });
    }
  }, {
    key: 'render',
    value: function render() {
      return _jsx('div', {
        id: 'simonContainer',
        style: styles.container
      }, void 0, _jsx(_Game2.default, {
        on: this.state.on,
        turnOnOff: this.turnOnOff,
        click: this.padClick,
        start: this.start,
        round: this.state.round,
        memorize: this.state.memorize,
        sound: this.state.sound,
        url: './' + this.state.currentColor + '.mp3',
        cursor: this.state.cursor,
        strict: this.strict,
        strictMode: this.state.strict
      }), _jsx(_Modal2.default, {
        open: this.state.modal,
        closeModal: this.closeModal
      }), _jsx('audio', {
        id: 'audio',
        src: require('./red.mp3')
      }));
    }
  }]);

  return Simon;
}(_react.Component);

exports.default = Simon = (0, _radium2.default)(Simon);