var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import smoothScroll from '../../../helpers/scroll';

var _ref = _jsx('div', {});

var Snippets = function (_Component) {
	_inherits(Snippets, _Component);

	function Snippets() {
		_classCallCheck(this, Snippets);

		return _possibleConstructorReturn(this, (Snippets.__proto__ || Object.getPrototypeOf(Snippets)).apply(this, arguments));
	}

	_createClass(Snippets, [{
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			smoothScroll(document.getElementById("wikiContainer"));
			console.log('component updated');
		}
	}, {
		key: 'renderSnippets',
		value: function renderSnippets(snippet, i) {
			var url = 'https://en.wikipedia.org/wiki/' + snippet.title;
			var text = snippet.snippet.replace(/<\/?[^>]+(>|$)/g, '').replace(/&quot;/g, '\"');
			return _jsx('a', {
				className: 'a' + i,
				href: url
			}, 'a' + i, _jsx('div', {
				className: 'snippet'
			}, 'd' + i, _jsx('p', {
				id: 'q' + i,
				className: 'snippetLinks'
			}, 'p' + i, snippet.title), _jsx('p', {
				id: 's' + i
			}, 't' + i, text)));
		}
	}, {
		key: 'render',
		value: function render() {
			if (this.props.wikis.length === 0) {
				return _ref;
			} else {
				return _jsx('div', {}, void 0, this.props.wikis[0].map(this.renderSnippets.bind(this)));
			}
		}
	}]);

	return Snippets;
}(Component);

function mapStateToProps(state) {
	return {
		wikis: state.wikis
	};
}

export default connect(mapStateToProps)(Snippets);