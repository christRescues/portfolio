var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import Radium from 'radium';

var styles = {
  modal: _defineProperty({
    display: 'block',
    position: 'fixed',
    width: '100%',
    maxWidth: '100%',
    height: '100%',
    maxHeight: '100%',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    margin: 'auto',
    zIndex: 1,
    overflow: 'auto',
    backgroundColor: 'rgb(0,0,0)'
  }, 'backgroundColor', 'rgba(0,0,0,0.4)'),
  modalContent: {
    textAlign: 'center',
    fontSize: '3em',
    backgroundColor: '#fefefe',
    margin: '100px auto',
    padding: '20px',
    border: '1px solid #888',
    width: '80%',
    height: '80%',
    maxHeight: '80%'
  },
  close: {
    color: '#aaa',
    float: 'right',
    fontSize: '40px',
    fontWeight: 'bold',
    ':hover': {
      color: 'black',
      textDecoration: 'none',
      cursor: 'pointer'
    }
  },
  text: {
    paddingLeft: '50px',
    fontFamily: "'Press Start 2P', 'cursive'",
    display: 'block',
    fontSize: '1em',
    maxWidth: '100%'
  },
  image: {
    height: '60%'
  },
  button: {
    fontSize: '.5em',
    cursor: 'pointer',
    float: 'right',
    verticalAlign: 'bottom'
  }
};

var _ref = _jsx('br', {});

var Modal = function (_Component) {
  _inherits(Modal, _Component);

  function Modal(props) {
    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    _this.state = { src: _this.props.src, display: 'block', winner: _this.props.winner };
    _this.changeModalDisplay = _this.changeModalDisplay.bind(_this);
    return _this;
  }

  _createClass(Modal, [{
    key: 'changeModalDisplay',
    value: function changeModalDisplay() {
      styles.modal = {
        display: 'none'
      };
      this.setState({ display: 'none' });
    }
  }, {
    key: 'render',
    value: function render() {
      return _jsx('div', {}, void 0, _jsx('div', {
        id: 'myModal',
        style: styles.modal
      }, void 0, _jsx('div', {
        style: styles.modalContent
      }, void 0, _jsx('span', {
        style: styles.close,
        onClick: this.changeModalDisplay
      }, void 0, '\xD7'), _jsx('p', {
        style: styles.text
      }, void 0, this.state.winner), _jsx('img', {
        src: this.state.src,
        alt: this.state.winner,
        style: styles.image
      }), _ref, _jsx('button', {
        style: styles.button,
        className: 'btn btn-primary',
        onClick: this.changeModalDisplay
      }, void 0, 'Close'))));
    }
  }]);

  return Modal;
}(Component);

export default Modal = Radium(Modal);