'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Actual default values
var md = require('markdown-it')({
  breaks: true,
  html: false }).use(require('markdown-it-prism')).use(require('markdown-it-emoji'));

var styles = {
  container: {
    border: '1px solid lightblue',
    borderRadius: '0',
    width: '50%',
    height: '90%',
    display: 'inline-block',
    padding: '10px 0 0 10px',
    textAlign: 'left',
    overflow: 'scroll'
  }
};

var Transformed = function Transformed(_ref) {
  var markdown = _ref.markdown;


  function markitup() {
    var rawMarkup = md.render(markdown);
    return {
      __html: rawMarkup
    };
  }

  return _jsx('div', {
    style: styles.container
  }, void 0, _jsx('div', {
    id: 'previewMarkdown',
    dangerouslySetInnerHTML: markitup()
  }));
};

exports.default = Transformed = (0, _radium2.default)(Transformed);