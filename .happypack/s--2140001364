import { Heading, Link } from 'components/atoms';
import PropTypes from 'prop-types';
import React from 'react';
import styled, { css } from 'styled-components';
import { palette } from 'styled-theme';
import { ifProp } from 'styled-tools';

var Wrapper = styled.div.withConfig({
  displayName: 'ProjectHeader__Wrapper'
})(['display:flex;align-items:center;justify-content:space-around;padding:100px 0;height:300px;width:100%;', ' ', ' @media (max-width:1000px){flex-direction:column;justify-content:center;height:auto;}'], ifProp('flip', css(['flex-direction:row-reverse;'])), ifProp('background', css(['background:linear-gradient( to left,', ',', ' );'], palette('gradient', 0), palette('gradient', 1))));

var ProjectImage = styled.img.withConfig({
  displayName: 'ProjectHeader__ProjectImage'
})(['border-radius:10px;height:inherit;@media (max-width:1000px){height:300px;margin-bottom:20px;}']);

var HeadingCtn = styled.div.withConfig({
  displayName: 'ProjectHeader__HeadingCtn'
})(['display:flex;flex-direction:column;justify-content:space-between;height:60%;width:50vw;text-align:center;']);

var StyledLink = styled(Link).withConfig({
  displayName: 'ProjectHeader__StyledLink'
})(['margin-top:15px;']);

var ProjectHeader = function ProjectHeader(_ref) {
  var header = _ref.header,
      background = _ref.background,
      image = _ref.image,
      flip = _ref.flip,
      link = _ref.link,
      to = _ref.to,
      href = _ref.href;
  return React.createElement(
    Wrapper,
    { background: background, flip: flip },
    React.createElement(ProjectImage, { src: image }),
    React.createElement(
      HeadingCtn,
      null,
      React.createElement(Heading, { background: background, header: header }),
      React.createElement(
        StyledLink,
        { to: to, href: href },
        link
      )
    )
  );
};

ProjectHeader.propTypes = {
  image: PropTypes.string.isRequired,
  header: PropTypes.string.isRequired,
  background: PropTypes.bool,
  flip: PropTypes.bool,
  link: PropTypes.string.isRequired,
  to: PropTypes.string,
  href: PropTypes.string
};

var _default = ProjectHeader;
export default _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(Wrapper, 'Wrapper', '/home/ryan/dev/port/src/components/organisms/ProjectHeader/index.js');

  __REACT_HOT_LOADER__.register(ProjectImage, 'ProjectImage', '/home/ryan/dev/port/src/components/organisms/ProjectHeader/index.js');

  __REACT_HOT_LOADER__.register(HeadingCtn, 'HeadingCtn', '/home/ryan/dev/port/src/components/organisms/ProjectHeader/index.js');

  __REACT_HOT_LOADER__.register(StyledLink, 'StyledLink', '/home/ryan/dev/port/src/components/organisms/ProjectHeader/index.js');

  __REACT_HOT_LOADER__.register(ProjectHeader, 'ProjectHeader', '/home/ryan/dev/port/src/components/organisms/ProjectHeader/index.js');

  __REACT_HOT_LOADER__.register(_default, 'default', '/home/ryan/dev/port/src/components/organisms/ProjectHeader/index.js');
}();

;