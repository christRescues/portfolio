'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var styles = {
  padding: {
    paddingTop: '30px',
    marginTop: '5px'
  },
  container: {
    margin: '0 auto -10px auto',
    textAlign: 'center',
    width: '50%'
  },
  bar: {
    padding: '0'
  }
};

var _ref2 = _jsx('div', {});

var Progress = function Progress(_ref) {
  var sessionTime = _ref.sessionTime,
      sessionMinutes = _ref.sessionMinutes,
      breakTime = _ref.breakTime,
      breakMinutes = _ref.breakMinutes,
      seconds = _ref.seconds,
      type = _ref.type,
      initialized = _ref.initialized;


  var startingTime = type === 'session' ? sessionTime : breakTime;
  var currentTime = type === 'session' ? sessionMinutes : breakMinutes;
  var startingSeconds = startingTime * 60;
  var currentSeconds = currentTime * 60 + seconds;

  var value = (startingSeconds - currentSeconds) / startingSeconds * 100;

  var color = type === 'session' ? 'bg-primary' : 'bg-success';

  var display = initialized === 'yes' ? _jsx('div', {
    id: 'progressBarContainer',
    style: styles.padding
  }, void 0, _jsx('div', {
    className: 'progress',
    style: styles.container
  }, void 0, _jsx('div', {
    className: 'progress-bar progress-bar-striped progress-bar-animated ' + color,
    role: 'progressbar',
    'aria-valuenow': value,
    'aria-valuemin': '0',
    'aria-valuemax': '100',
    style: { width: value + '%' }
  }))) : _ref2;

  return _jsx('div', {}, void 0, display);
};

exports.default = Progress = (0, _radium2.default)(Progress);