var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import Radium from 'radium';
import Display from './Display';
import Button from './Button';
import './styles.css';

var styles = {
  backdrop: {
    background: '#e6e8ed',
    padding: '20px',
    width: '290px',
    height: '350px',
    margin: '20px auto',
    textAlign: 'center',
    borderRadius: '20px',
    boxShadow: '3px 5px 1px grey'
  }
};

var _ref = _jsx('br', {});

var _ref2 = _jsx('br', {});

var _ref3 = _jsx('br', {});

var Calc = function (_Component) {
  _inherits(Calc, _Component);

  function Calc(props) {
    _classCallCheck(this, Calc);

    var _this = _possibleConstructorReturn(this, (Calc.__proto__ || Object.getPrototypeOf(Calc)).call(this, props));

    _this.state = {
      currentDisplay: '0',
      runningTotal: 0,
      operator: false,
      lastOp: ''
    };

    _this.onNumClick = _this.onNumClick.bind(_this);
    _this.onOperationClick = _this.onOperationClick.bind(_this);
    _this.onDeletePress = _this.onDeletePress.bind(_this);
    _this.onKeyPress = _this.onKeyPress.bind(_this);
    return _this;
  }

  _createClass(Calc, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.addEventListener("keydown", this.onDeletePress);
      document.addEventListener("keypress", this.onKeyPress);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener("keydown", this.onDeletePress);
      document.removeEventListener("keypress", this.onKeyPress);
    }
  }, {
    key: 'onDeletePress',
    value: function onDeletePress(event) {
      if (event.keyCode === 8) this.onOperationClick('⇐');
      if (event.keyCode === 46) this.onOperationClick('⇐');
    }
  }, {
    key: 'onKeyPress',
    value: function onKeyPress(event) {
      switch (event.keyCode) {
        case 13:
          this.onOperationClick('=');
          break;
        case 42:
          this.onOperationClick('X');
          break;
        case 47:
          this.onOperationClick('÷');
          break;
        case 43:
          this.onOperationClick('+');
          break;
        case 45:
          this.onOperationClick('-');
          break;
        case 46:
          this.onOperationClick('.'); //
          break;
        case 37:
          this.onOperationClick('%');
          break;
        case 48:
          this.onNumClick(0);
          break;
        case 49:
          this.onNumClick(1);
          break;
        case 50:
          this.onNumClick(2);
          break;
        case 51:
          this.onNumClick(3);
          break;
        case 52:
          this.onNumClick(4);
          break;
        case 53:
          this.onNumClick(5);
          break;
        case 54:
          this.onNumClick(6);
          break;
        case 55:
          this.onNumClick(7);
          break;
        case 56:
          this.onNumClick(8);
          break;
        case 57:
          this.onNumClick(9);
          break;
      }
    }
  }, {
    key: 'onNumClick',
    value: function onNumClick(value) {
      if (this.state.currentDisplay === '0' || this.state.operator === true) {
        this.setState({
          currentDisplay: '' + value,
          operator: false
        });
      } else {
        this.setState({
          currentDisplay: '' + this.state.currentDisplay + value
        });
      }
    }
  }, {
    key: 'onOperationClick',
    value: function onOperationClick(value) {
      var _this2 = this;

      var current = Number(this.state.currentDisplay);
      var total = function total(lastOp) {
        switch (lastOp) {
          case 'X':
            return current * _this2.state.runningTotal;
            break;
          case '÷':
            return _this2.state.runningTotal / current;
            break;
          case '+':
            return current + _this2.state.runningTotal;
            break;
          case '-':
            return _this2.state.runningTotal - current;
            break;
          default:
            return current;
            break;
        }
      };

      var temp = total(this.state.lastOp);
      var set = function set(opType) {
        _this2.setState({
          currentDisplay: temp.toString(),
          runningTotal: temp,
          operator: true,
          lastOp: opType
        });
      };

      switch (value) {
        case 'AC':
          this.setState({
            currentDisplay: '0',
            operator: false,
            runningTotal: 0
          });
          break;

        case '⇐':
          var val = this.state.currentDisplay.length === 1 ? '0' : this.state.currentDisplay.substring(0, this.state.currentDisplay.length - 1);
          this.setState({
            currentDisplay: val
          });
          break;

        case '%':
          var twoRight = this.state.currentDisplay.slice(this.state.currentDisplay.length - 2);

          var left = this.state.currentDisplay.slice(0, this.state.currentDisplay.length - 2);

          var percent = this.state.currentDisplay.length >= 2 ? left + '.' + twoRight : '.0' + this.state.currentDisplay;

          var setPercent = function setPercent(percentTotal) {
            _this2.setState({
              currentDisplay: percentTotal.toString(),
              runningTotal: percentTotal,
              operator: false,
              lastOp: ''
            });
          };

          if (this.state.lastOp === '+') {
            var percentTotal = this.state.runningTotal * (1 + Number(percent));
            setPercent(percentTotal);
          } else if (this.state.lastOp === '-') {
            var _percentTotal = this.state.runningTotal * (1 - Number(percent));
            setPercent(_percentTotal);
          } else if (this.state.lastOp === 'X') {
            var _percentTotal2 = this.state.runningTotal * Number(percent);
            setPercent(_percentTotal2);
          } else if (this.state.lastOp === '÷') {
            var _percentTotal3 = this.state.runningTotal / Number(percent);
            setPercent(_percentTotal3);
          }
          break;
        case '.':
          if (this.state.currentDisplay.split(".").length > 1) {
            alert('This # already has a decimal');
          } else {
            this.setState({
              currentDisplay: this.state.currentDisplay + '.'
            });
          }
          break;
        case 'X':
          set('X');
          break;
        case '÷':
          set('÷');
          break;
        case '+':
          set('+');
          break;
        case '-':
          set('-');
          break;
        case '=':
          set('');
          break;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _jsx('div', {
        id: 'calcBackground'
      }, void 0, _jsx('div', {
        style: styles.backdrop
      }, void 0, _jsx(Display, {
        currentDisplay: this.state.currentDisplay
      }), _jsx(Button, {
        color: '#d35252',
        content: 'AC',
        click: this.onOperationClick
      }), _jsx(Button, {
        color: '#d35252',
        content: '\u21D0',
        size: 'big',
        click: this.onOperationClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: '%',
        click: this.onOperationClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: '\xF7',
        height: '40px',
        click: this.onOperationClick,
        size: 'big'
      }), _ref, _jsx(Button, {
        color: '#4c4a4a',
        content: 7,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: 8,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: 9,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: 'X',
        height: '40px',
        click: this.onOperationClick
      }), _ref2, _jsx(Button, {
        color: '#4c4a4a',
        content: 4,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: 5,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: 6,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: '-',
        height: '40px',
        click: this.onOperationClick,
        size: 'big'
      }), _ref3, _jsx(Button, {
        color: '#4c4a4a',
        content: 1,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: 2,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: 3,
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: '+',
        type: 'plus',
        click: this.onOperationClick,
        size: 'big'
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: 0,
        type: 'bottom',
        click: this.onNumClick
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: '.',
        type: 'bottom',
        click: this.onOperationClick,
        size: 'big'
      }), _jsx(Button, {
        color: '#4c4a4a',
        content: '=',
        type: 'bottom',
        click: this.onOperationClick,
        size: 'big'
      })));
    }
  }]);

  return Calc;
}(Component);

export default Calc = Radium(Calc);