var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';

var SearchBar = function (_Component) {
	_inherits(SearchBar, _Component);

	function SearchBar(props) {
		_classCallCheck(this, SearchBar);

		var _this = _possibleConstructorReturn(this, (SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call(this, props));

		_this.state = { term: '' };
		_this.onKeyPress = _this.onKeyPress.bind(_this);
		return _this;
	}

	_createClass(SearchBar, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			document.addEventListener("keypress", this.onKeyPress);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			document.removeEventListener("keypress", this.onKeyPress);
		}
	}, {
		key: 'onKeyPress',
		value: function onKeyPress(e) {
			if (e.keyCode === 13) {
				this.props.search();
			}
		}
	}, {
		key: 'onInputChange',
		value: function onInputChange(term) {
			this.setState({ term: term });
			this.props.change(term);
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			return _jsx('div', {
				className: 'search-bar',
				style: { width: '500px' }
			}, void 0, _jsx('input', {
				value: this.state.term,
				onChange: function onChange(e) {
					return _this2.onInputChange(e.target.value);
				}
			}), _jsx('button', {
				style: { marginLeft: '10px' },
				type: 'button',
				className: 'btn btn-primary',
				onClick: this.props.search
			}, void 0, 'Go'));
		}
	}]);

	return SearchBar;
}(Component);

export default SearchBar;