'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _AddRecipe = require('./AddRecipe');

var _AddRecipe2 = _interopRequireDefault(_AddRecipe);

var _EditRecipe = require('./EditRecipe');

var _EditRecipe2 = _interopRequireDefault(_EditRecipe);

var _Recipes = require('./Recipes');

var _Recipes2 = _interopRequireDefault(_Recipes);

var _GetPinsBtn = require('./GetPinsBtn');

var _GetPinsBtn2 = _interopRequireDefault(_GetPinsBtn);

var _RecipeBtns = require('./RecipeBtns');

var _RecipeBtns2 = _interopRequireDefault(_RecipeBtns);

var _PinterestRecipes = require('./PinterestRecipes');

var _PinterestRecipes2 = _interopRequireDefault(_PinterestRecipes);

var _api = require('../../../api');

var _api2 = _interopRequireDefault(_api);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//authentication


var Box = function (_Component) {
  _inherits(Box, _Component);

  function Box(props) {
    _classCallCheck(this, Box);

    var _this = _possibleConstructorReturn(this, (Box.__proto__ || Object.getPrototypeOf(Box)).call(this, props));

    _this.state = {
      boards: [],
      pinterestRecipes: [],
      defaultRecipes: [{ title: 'Spaghetti',
        ingredients: [{ name: 'Noodles', measurement: '1 box' }, { name: 'Tomato Sauce', measurement: '2 cups' }, { name: 'Meatballs', measurement: '1 lb' }],
        expanded: false
      }, { title: 'Pumpkin Pie',
        ingredients: [{ name: 'Pumpkin sauce', measurement: '1 lb' }, { name: 'Crust', measurement: '1 thing' }, { name: 'Sugar', measurement: '5 cups' }],
        expanded: false
      }],
      token: ''
    };
    return _this;
  }

  _createClass(Box, [{
    key: 'getPins',
    value: function getPins() {
      // NOTE step: 1 in Pinterest Oauth flow get Token

      var base = 'https://api.pinterest.com/oauth/?';
      var type = 'response_type=code&';
      var redirect = process.env.NODE_ENV === 'development' ? 'redirect_uri=https://localhost:8443/recipebox&' : 'redirect_uri=https://ryantg.herokuapp.com/recipebox&';
      var appId = 'client_id=4882157526600140164&';
      var scope = 'scope=read_public,write_public&';
      var state = 'state=8449codE';
      var oauth = '' + base + type + redirect + appId + scope + state;
      window.location = oauth;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      //updates the sessionStorage from state
      sessionStorage.setItem('defaultRecipes', JSON.stringify(this.state.defaultRecipes));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      //sets the state with sessionStorage details from user's
      //previous changes
      if (sessionStorage.getItem('defaultRecipes') !== null) {
        var sessionRecipes = JSON.parse(sessionStorage.getItem('defaultRecipes'));
        this.setState({ defaultRecipes: sessionRecipes });
      }
      //check url for pinterest auth code
      //check url for state to prevent spoofing
      var query = _querystring2.default.parse(window.location.search);
      var token = sessionStorage.getItem('token');

      if (query['?state'] === '8449codE' && query['code'] && token === null) {

        // NOTE step: 2 in Pinterest Oauth flow; get auth code
        var base = 'https://api.pinterest.com/v1/oauth/token?';
        var grant = 'grant_type=authorization_code&';
        var appId = 'client_id=4882157526600140164&';
        var appSecret = 'client_secret=4631d697d91080136adb7f8b967d2f2f479ef39866e4ec9373571d2343871c04&';
        var code = 'code=' + query['code'];
        var url = '' + base + grant + appId + appSecret + code;

        _axios2.default.post(url).then(function (res) {
          sessionStorage.setItem('token', 'access_token=' + res.data.access_token + '&');
          _this2.getBoards(sessionStorage.getItem('token'));
        }).catch(function (err) {
          return console.log(err);
        });
      } else if (typeof sessionStorage.getItem('token') === 'string') {
        this.getBoards(sessionStorage.getItem('token'));
      }
    }
  }, {
    key: 'getBoards',
    value: function getBoards(authToken) {
      var _this3 = this;

      // NOTE step: 3 in Pinterest Oauth flow; get boards
      var base = 'https://api.pinterest.com/v1/me/boards/?';
      var url = '' + _api2.default + base + authToken;
      _axios2.default.get(url).then(function (res) {
        //delete boards that do not container eat or recipe or food

        var boardsArr = res.data.data.filter(function (board) {
          var name = board.name.toUpperCase();
          return name.includes('eat'.toUpperCase()) === true || name.includes('recipe'.toUpperCase()) === true || name.includes('food'.toUpperCase()) === true;
        });
        _this3.setState({
          boards: boardsArr
        });
        console.log('boards response', res.data);
      }).catch(function (err) {
        return console.log(err);
      });
    }
  }, {
    key: 'selectBoard',
    value: function selectBoard(board) {
      var _this4 = this;

      var base = 'https://api.pinterest.com/v1/boards/';
      var userUrl = new _urlParse2.default(board.url);
      var pathArr = userUrl.pathname.split('/');
      var user = pathArr[1];
      var boardName = pathArr[2];
      var token = sessionStorage.getItem('token');
      var fields = 'fields=id,link,metadata,image';
      var url = '' + base + user + '/' + boardName + '/pins/?' + token + fields;

      // NOTE step: 4 in Pinterest Oauth flow
      // adds pins to state
      _axios2.default.get(url).then(function (res) {
        var pinterestRecipes = res.data.data.map(function (recipe) {
          return Object.assign({}, recipe, { expanded: false });
        });
        _this4.setState({ pinterestRecipes: pinterestRecipes });
      }).catch(function (err) {
        return console.log(err);
      });
    }
  }, {
    key: 'collapse',
    value: function collapse(i, pint) {
      if (pint === undefined) {
        var arr = this.state.defaultRecipes;
        arr[i]['expanded'] = true;
        this.setState({ defaultRecipes: [].concat(_toConsumableArray(arr)) });
      } else {
        var _arr = this.state.pinterestRecipes;
        _arr[i]['expanded'] = true;
        this.setState({ pinterestRecipes: [].concat(_toConsumableArray(_arr)) });
      }
    }
  }, {
    key: 'expand',
    value: function expand(i, pint) {
      if (pint === undefined) {
        var arr = this.state.defaultRecipes;
        arr[i]['expanded'] = false;
        this.setState({ defaultRecipes: [].concat(_toConsumableArray(arr)) });
      } else {
        var _arr2 = this.state.pinterestRecipes;
        _arr2[i]['expanded'] = false;
        this.setState({ pinterestRecipes: [].concat(_toConsumableArray(_arr2)) });
      }
    }
  }, {
    key: 'submitForm',
    value: function submitForm(recipeName, ingredients) {
      var newRecipe = { title: recipeName, ingredients: ingredients, expanded: true };
      this.setState({
        defaultRecipes: [].concat(_toConsumableArray(this.state.defaultRecipes), [newRecipe])
      });
    }
  }, {
    key: 'deleteRecipe',
    value: function deleteRecipe(recipe) {
      //deletes recipes that have been inputted by user
      var recipes = this.state.defaultRecipes;

      for (var i = 0; i < recipes.length; i++) {
        if (recipes[i]['title'] === recipe) {
          recipes.splice(i, 1);
          this.setState({ defaultRecipes: recipes });
          break;
        }
      }
    }
  }, {
    key: 'editRecipe',
    value: function editRecipe(recipe, i) {
      var recipes = this.state.defaultRecipes;
      recipes[i] = recipe;
      this.setState({ defaultRecipes: recipes });
    }
  }, {
    key: 'render',
    value: function render() {
      return _jsx('div', {
        className: 'container'
      }, void 0, _jsx('div', {
        className: 'row'
      }, void 0, _jsx('div', {
        className: 'col'
      }, void 0, _jsx(_GetPinsBtn2.default, {
        getPins: this.getPins.bind(this)
      }), _jsx(_RecipeBtns2.default, {
        boards: this.state.boards,
        selectBoard: this.selectBoard.bind(this)
      }), _jsx(_PinterestRecipes2.default, {
        pins: this.state.pinterestRecipes,
        collapse: this.collapse.bind(this),
        expand: this.expand.bind(this)
      }), _jsx(_Recipes2.default, {
        recipes: this.state.defaultRecipes,
        collapse: this.collapse.bind(this),
        expand: this.expand.bind(this),
        deleteRecipe: this.deleteRecipe.bind(this),
        editRecipe: this.editRecipe.bind(this)
      }), _jsx(_AddRecipe2.default, {
        submit: this.submitForm.bind(this)
      }))));
    }
  }]);

  return Box;
}(_react.Component);

exports.default = Box = (0, _radium2.default)(Box);