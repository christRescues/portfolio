{"version":3,"sources":["src/theme/index.js"],"names":["createMediaQuery","n","addAliases","arr","aliases","forEach","key","i","Object","defineProperty","enumerable","get","breakpoints","mediaQueries","map","space","font","fontSizes","regular","bold","fontWeights","black","white","text","lightBlue","blue","darkBlue","lightGray","borderGray","gray","darkGray","lightGreen","green","darkGreen","lightRed","red","darkRed","lightOrange","orange","darkOrange","lightPurple","purple","darkPurple","flatten","name","colors","reduce","a","b","color","blues","grays","greens","reds","oranges","purples","radii","radius","maxContainerWidth","shadowColor","boxShadows","theme"],"mappings":"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","file":"index.js","sourceRoot":"/home/ryan/dev/port","sourcesContent":["const createMediaQuery = n => `@media screen and (min-width:${n}em)`\n\nconst addAliases = (arr, aliases) =>\n  aliases.forEach((key, i) =>\n    Object.defineProperty(arr, key, {\n      enumerable: false,\n      get() {\n        return this[i]\n      },\n    }),\n  )\n\nexport const breakpoints = [32, 40, 48, 64]\n\nexport const mediaQueries = breakpoints.map(createMediaQuery)\n\nconst aliases = ['sm', 'md', 'lg', 'xl']\n\naddAliases(breakpoints, aliases)\naddAliases(mediaQueries, aliases)\n\nexport const space = [0, 4, 8, 16, 32, 64, 128]\n\nexport const font = `'Montserrat','Helvetica Neue',Helvetica,Arial,sans-serif`\n\nexport const fontSizes = [12, 14, 16, 20, 24, 32, 48]\n\nexport const regular = 400\nexport const bold = 600\n\n// styled-system's `fontWeight` function can hook into the `fontWeights` object\nexport const fontWeights = {\n  regular,\n  bold,\n}\n\n// color palette\nconst black = '#000'\nconst white = '#fff'\nconst text = '#001833'\nconst lightBlue = '#cdf'\nconst blue = '#007aff' // primary\nconst darkBlue = '#049'\nconst lightGray = '#f0f2f4'\nconst borderGray = '#abb7c2'\nconst gray = '#687B8E' // primary\nconst darkGray = '#364049'\nconst lightGreen = '#cec'\nconst green = '#0a0' // secondary\nconst darkGreen = '#060'\nconst lightRed = '#fcc'\nconst red = '#c00' // secondary\nconst darkRed = '#800'\nconst lightOrange = '#fec'\nconst orange = '#f90' // secondary\nconst darkOrange = '#950'\nconst lightPurple = '#ecf'\nconst purple = '#70b' // secondary\nconst darkPurple = '#407'\n\n// tints\nconst flatten = (name, colors) =>\n  colors.reduce((a, b, i) => {\n    const color = {\n      [name + i]: b,\n    }\n    return { ...a, ...color }\n  }, {})\n\nconst blues = [lightBlue, lightBlue, blue, blue]\nconst grays = [lightGray, lightGray, gray, gray]\nconst greens = [lightGreen, lightGreen, green, green]\nconst reds = [lightRed, lightRed, red, red]\nconst oranges = [lightOrange, lightOrange, orange, orange]\nconst purples = [lightPurple, lightPurple, purple, purple]\n\nexport const colors = {\n  black,\n  white,\n  text,\n  blue,\n  lightBlue,\n  darkBlue,\n  gray,\n  lightGray,\n  borderGray,\n  darkGray,\n  green,\n  lightGreen,\n  darkGreen,\n  red,\n  lightRed,\n  darkRed,\n  orange,\n  lightOrange,\n  darkOrange,\n  purple,\n  lightPurple,\n  darkPurple,\n  blues,\n  greens,\n  reds,\n  oranges,\n  purples,\n  ...flatten('blue', blues),\n  ...flatten('gray', grays),\n  ...flatten('green', greens),\n  ...flatten('red', reds),\n  ...flatten('orange', oranges),\n  ...flatten('purple', purples),\n}\n\n// styled-system's `borderRadius` function can hook into the `radii` object/array\nexport const radii = [0, 2, 6]\nexport const radius = '2px'\n\nexport const maxContainerWidth = '1280px'\n\nconst shadowColor = 'rgba(0,0,0,0.08)'\nexport const boxShadows = [\n  `0 0 4px 0 ${shadowColor}`,\n  `0 8px 8px 0 ${shadowColor}`,\n  `0 16px 16px 0 ${shadowColor}`,\n  `0 32px 32px 0 ${shadowColor}`,\n]\n\nconst theme = {\n  breakpoints,\n  mediaQueries,\n  space,\n  font,\n  fontSizes,\n  fontWeights,\n  regular,\n  bold,\n  colors,\n  radii,\n  radius,\n  boxShadows,\n  maxContainerWidth,\n}\n\nexport default theme\n"]}