'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _nextGen_helper = require('./nextGen_helper');

var _nextGen_helper2 = _interopRequireDefault(_nextGen_helper);

var _pattern_helper = require('./pattern_helper');

var _pattern_helper2 = _interopRequireDefault(_pattern_helper);

var _OptionsTable = require('./OptionsTable');

var _OptionsTable2 = _interopRequireDefault(_OptionsTable);

var _Start = require('./Start');

var _Start2 = _interopRequireDefault(_Start);

var _Pause = require('./Pause');

var _Pause2 = _interopRequireDefault(_Pause);

var _Reset = require('./Reset');

var _Reset2 = _interopRequireDefault(_Reset);

var _Step = require('./Step');

var _Step2 = _interopRequireDefault(_Step);

var _Count = require('./Count');

var _Count2 = _interopRequireDefault(_Count);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  container: {
    margin: '10px auto',
    textAlign: 'center'
  },
  header: {
    marginBottom: '10px'
  },
  canvas: {
    cursor: 'pointer',
    border: '1px solid black'
  }
};

//Global variables
var Interval = void 0,
    canvas = void 0,
    ctx = void 0;

var Board = function (_Component) {
  _inherits(Board, _Component);

  function Board(props) {
    _classCallCheck(this, Board);

    var _this = _possibleConstructorReturn(this, (Board.__proto__ || Object.getPrototypeOf(Board)).call(this, props));

    var size = 50;
    var coords = 8;
    var dimensions = coords;
    var canvasSize = size * coords.toString() + 'px';

    function createRandMatrix(width, height) {
      var result = [];
      for (var i = 0; i < width; i++) {
        result[i] = [];
        for (var j = 0; j < height; j++) {
          result[i][j] = !!Math.floor(Math.random() * 2);
        }
      }
      return result;
    }

    _this.state = {
      cells: createRandMatrix(50, 50),
      count: 0,
      speed: 100,
      running: false,
      canvasSize: canvasSize,
      newCanvas: null,
      boardSize: size,
      dimensions: dimensions,
      viewportHeight: innerHeight * .80,
      choosingPattern: false,
      patternType: ''
    };

    return _this;
  }

  _createClass(Board, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      canvas = document.getElementById('lifeCanvas');
      ctx = canvas.getContext('2d');
      this.renderCanvas(this.state.dimensions, this.state.cells);
      this.start(this.state.speed);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearInterval(Interval);
    }
    //next three functions handle the computation of nextGen

  }, {
    key: 'storeNeighbors',
    value: function storeNeighbors(size) {
      var cells = this.state.cells;
      (0, _nextGen_helper2.default)(this, cells, size);
    }
  }, {
    key: 'countNeighbors',
    value: function countNeighbors(neighbors, cell) {
      var alive = 0;
      neighbors.forEach(function (neighbor) {
        if (neighbor === true) ++alive;
      });
      return this.nextState(alive, cell);
    }
  }, {
    key: 'nextState',
    value: function nextState(alive, cell) {
      if (cell === false && alive === 3) {
        return true;
      } else if (cell === true && alive < 2) {
        return false;
      } else if (cell === true && alive > 3) {
        return false;
      } else if (cell === true && alive >= 2) {
        return true;
      } else {
        return false;
      }
    }

    // next 5 functions handle rendering to the canvas element

  }, {
    key: 'drawCorrectBox',
    value: function drawCorrectBox(cell, deadOrAlive, row, col) {
      var d = this.state.dimensions;
      if (cell !== deadOrAlive) {
        cell === true ? this.drawDeadBox(col * d, row * d) : this.drawAliveBox(col * d, row * d);
      }
      return deadOrAlive;
    }
  }, {
    key: 'drawDeadBox',
    value: function drawDeadBox(x, y) {
      var d = this.state.dimensions;

      ctx.lineWidth = .2;
      ctx.fillStyle = 'rgb(225,228,233)';
      ctx.strokeStyle = 'rgb(0,0,0)';

      ctx.fillRect(x, y, d, d);
      ctx.strokeRect(x, y, d, d);
    }
  }, {
    key: 'drawAliveBox',
    value: function drawAliveBox(x, y) {
      var d = this.state.dimensions;
      ctx.fillStyle = 'rgb(2,117,216)';
      ctx.fillRect(x, y, d, d);
    }
  }, {
    key: 'canvasClick',
    value: function canvasClick(e) {
      //get coords of click
      var d = this.state.dimensions;

      var x = Math.floor(e.nativeEvent.offsetX / d) * d;
      var y = Math.floor(e.nativeEvent.offsetY / d) * d;

      var cells = this.state.cells;
      var row = y / d;
      var col = x / d;

      if (this.state.choosingPattern === false) {
        var color = ctx.getImageData(e.nativeEvent.offsetX, e.nativeEvent.offsetY, 1, 1).data;
        var rgb = 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';

        rgb === 'rgb(2,117,216)' ? this.drawDeadBox(x, y) : this.drawAliveBox(x, y);

        cells[row][col] = !cells[row][col];
        this.setState({ cells: cells });
      } else {
        var newPattern = (0, _pattern_helper2.default)(this, cells, x, y, d, this.state.patternType);

        this.setState({
          choosingPattern: false,
          cells: newPattern
        });
      }
    }
  }, {
    key: 'placePattern',
    value: function placePattern(type) {
      this.setState({
        choosingPattern: true,
        patternType: type
      });
    }
  }, {
    key: 'setSpeed',
    value: function setSpeed(speed) {
      var _this2 = this;

      clearInterval(Interval);
      var loopForever = function loopForever() {
        Interval = setInterval(startItUp, speed || _this2.state.speed);
      };
      var startItUp = function startItUp() {
        _this2.storeNeighbors(_this2.state.boardSize - 1);
      };
      loopForever();
      this.setState({ speed: speed });
    }
  }, {
    key: 'setSize',
    value: function setSize(size, dimensions, newCanvas) {
      var _this3 = this;

      clearInterval(Interval);

      var canvasSize = size * dimensions.toString() + 'px';

      var matrix = Array(size).fill(false).map(function () {
        return Array(size).fill(false);
      });

      matrix[0][0] = true;
      matrix[0][1] = true;
      matrix[0][2] = true;
      matrix[1][0] = true;
      matrix[2][1] = true;

      var convertSizeToNum = Number(this.state.canvasSize.substring(0, this.state.canvasSize.length - 2));

      ctx.clearRect(0, 0, convertSizeToNum, convertSizeToNum);

      this.setState({
        running: false,
        cells: matrix,
        canvasSize: canvasSize,
        boardSize: size,
        dimensions: dimensions,
        newCanvas: newCanvas
      }, function () {
        _this3.renderCanvas(dimensions, matrix);
      });
    }
  }, {
    key: 'renderCanvas',
    value: function renderCanvas(d, cells) {
      var _this4 = this;

      cells.map(function (cells, x) {
        return cells.map(function (cell, y) {
          var coords = cell === true ? _this4.drawAliveBox(y * d, x * d) : _this4.drawDeadBox(y * d, x * d);
          return;
        });
      });
    }

    // next 3 functions handle startUP, pausing, and stepping

  }, {
    key: 'start',
    value: function start() {
      var _this5 = this;

      if (!this.state.running) {
        (function () {
          var loopForever = function loopForever() {
            Interval = setInterval(startItUp, _this5.state.speed);
          };
          var startItUp = function startItUp() {
            _this5.storeNeighbors(_this5.state.boardSize - 1);
          };
          loopForever();
          _this5.setState({ running: true });
        })();
      }
    }
  }, {
    key: 'pause',
    value: function pause() {
      clearInterval(Interval);
      this.setState({ running: false });
    }
  }, {
    key: 'reset',
    value: function reset() {
      var _this6 = this;

      clearInterval(Interval);

      var matrix = Array(this.state.boardSize).fill(false).map(function () {
        return Array(_this6.state.boardSize).fill(false);
      });

      matrix[0][0] = true;
      matrix[0][1] = true;
      matrix[0][2] = true;
      matrix[1][0] = true;
      matrix[2][1] = true;

      this.renderCanvas(this.state.dimensions, matrix);

      this.setState({
        count: 0,
        cells: matrix,
        running: false
      });
    }
  }, {
    key: 'step',
    value: function step() {
      var size = this.state.boardSize - 1;
      this.storeNeighbors(size);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this7 = this;

      return _jsx('div', {
        style: styles.container
      }, void 0, _jsx('div', {
        style: styles.header
      }, void 0, _jsx(_Step2.default, {
        step: this.step.bind(this)
      }), _jsx(_Start2.default, {
        start: this.start.bind(this),
        running: this.state.running
      }), _jsx(_Pause2.default, {
        pause: this.pause.bind(this)
      }), _jsx(_Reset2.default, {
        reset: this.reset.bind(this)
      }), _jsx(_Count2.default, {
        count: this.state.count
      })), _jsx('div', {
        style: { display: 'inline-block' }
      }, void 0, _jsx('canvas', {
        id: 'lifeCanvas',
        width: this.state.canvasSize,
        height: this.state.canvasSize,
        style: styles.canvas,
        onClick: function onClick(e) {
          return _this7.canvasClick(e);
        }
      }, void 0)), _jsx('div', {
        style: styles.footer
      }, void 0, _jsx(_OptionsTable2.default, {
        placePattern: this.placePattern.bind(this),
        setSpeed: this.setSpeed.bind(this),
        setSize: this.setSize.bind(this)
      })));
    }
  }]);

  return Board;
}(_react.Component);

exports.default = Board = (0, _radium2.default)(Board);