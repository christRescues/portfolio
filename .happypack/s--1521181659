'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _Square = require('./Square');

var _Square2 = _interopRequireDefault(_Square);

var _Player = require('./Player');

var _Player2 = _interopRequireDefault(_Player);

var _ChoosePlayer = require('./ChoosePlayer');

var _ChoosePlayer2 = _interopRequireDefault(_ChoosePlayer);

var _Replay = require('./Replay');

var _Replay2 = _interopRequireDefault(_Replay);

var _Modal = require('./Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _aiFunctions = require('./aiFunctions');

var _scroll = require('../../../helpers/scroll');

var _scroll2 = _interopRequireDefault(_scroll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  boardContainer: {
    paddingTop: '30px'
  },
  board: {
    maxWidth: '100%',
    maxHeight: '100%',
    height: 'auto',
    width: 'auto'
  },
  container: {
    textAlign: 'center'
  },
  shiftUp: {
    marginTop: '-200px'
  }
};

var winner = '';
console.log(winner);

var _ref = _jsx(_ChoosePlayer2.default, {
  animate: 'animated rollOut'
});

var Board = function (_Component) {
  _inherits(Board, _Component);

  function Board(props) {
    _classCallCheck(this, Board);

    var _this = _possibleConstructorReturn(this, (Board.__proto__ || Object.getPrototypeOf(Board)).call(this, props));

    _this.state = {
      squares: Array(9).fill(null),
      currentPlayer: '',
      humanPlayer: '',
      AIPlayer: '',
      showPlayerChoice: true,
      moveCount: 0,
      gameType: '',
      winner: '',
      src: ''
    };
    _this.onPlayerClick = _this.onPlayerClick.bind(_this);
    _this.reset = _this.reset.bind(_this);
    return _this;
  }

  _createClass(Board, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      (0, _scroll2.default)(document.getElementById("boardContainer"));
    }
  }, {
    key: 'calculateWinner',
    value: function calculateWinner(taken) {
      var _this2 = this;

      var wins = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
      wins.forEach(function (arr) {
        if (taken[arr[0]] === 'X' && taken[arr[1]] === 'X' && taken[arr[2]] === 'X') {
          var src = _this2.state.humanPlayer === 'O' ? 'https://goo.gl/nFFA75' : 'https://goo.gl/2AJg6p';
          _this2.setState({
            winner: 'X wins!!!',
            src: src
          });
        } else if (taken[arr[0]] === 'O' && taken[arr[1]] === 'O' && taken[arr[2]] === 'O') {
          var _src = _this2.state.humanPlayer === 'O' ? 'https://goo.gl/2AJg6p' : 'https://goo.gl/nFFA75';
          _this2.setState({
            winner: 'O wins!!!',
            src: _src
          });
        }
      });

      if ((taken[0] && taken[1] && taken[2] && taken[3] && taken[4] && taken[5] && taken[6] && taken[7] && taken[8]) !== null) {
        this.setState({
          winner: "Cat's Game!!!",
          src: 'https://goo.gl/Fhsbdv'
        });
      }
    }
  }, {
    key: 'handleClick',
    value: function handleClick(i) {
      var squares = this.state.squares.slice();
      if (squares[i] === null) {
        this.AIMove(i, this.state.humanPlayer, this.state.AIPlayer);
      } else {
        alert('Please choose a different space :)');
      }
    }
  }, {
    key: 'AIMove',
    value: function AIMove(spaceTaken, humanPlayer, AIPlayer) {
      var _this3 = this;

      var squares = this.state.squares.slice();
      var count = this.state.moveCount;

      var initialize = function initialize(gameType) {
        _this3.setState({
          squares: squares,
          currentPlayer: humanPlayer,
          moveCount: count + 1,
          gameType: gameType
        });
      };

      var setBoard = function setBoard(squares) {
        _this3.calculateWinner(squares);
        _this3.setState({
          squares: squares,
          moveCount: count + 1
        });
      };

      //first 3 ifs initialize the gametype
      if (count === 0 && (spaceTaken === 0 || spaceTaken === 2 || spaceTaken === 6 || spaceTaken === 8)) {
        squares[spaceTaken] = humanPlayer;
        squares[4] = AIPlayer;
        initialize('cornerFirst');
      } else if (count === 0 && spaceTaken === 4) {
        squares[spaceTaken] = humanPlayer;
        squares[0] = AIPlayer;
        initialize('middleFirst');
      } else if (count === 0) {
        squares[spaceTaken] = humanPlayer;
        squares[4] = AIPlayer;
        initialize('edgeFirst');
      }

      //handle games where human takes corner spot first
      if (this.state.gameType == 'cornerFirst') {
        squares[spaceTaken] = humanPlayer;
        if (typeof (0, _aiFunctions.win)(squares, humanPlayer, AIPlayer) === 'number') {
          squares[(0, _aiFunctions.win)(squares, humanPlayer, AIPlayer)] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.block)(squares, humanPlayer, AIPlayer) === 'number') {
          squares[(0, _aiFunctions.block)(squares, humanPlayer, AIPlayer)] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.takeEdge)(squares, humanPlayer) === 'number') {
          squares[(0, _aiFunctions.takeEdge)(squares, humanPlayer)] = AIPlayer;
          setBoard(squares);
        } else {
          squares[(0, _aiFunctions.blockFork)(squares, humanPlayer)] = AIPlayer;
          setBoard(squares);
        }
      }

      //handles game where human takes middleFirst
      if (this.state.gameType == 'middleFirst') {
        squares[spaceTaken] = humanPlayer;
        if (typeof (0, _aiFunctions.win)(squares, humanPlayer, AIPlayer) === 'number') {
          squares[(0, _aiFunctions.win)(squares, humanPlayer, AIPlayer)] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.block)(squares, humanPlayer, AIPlayer) === 'number') {
          squares[(0, _aiFunctions.block)(squares, humanPlayer, AIPlayer)] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.blockFork)(squares, humanPlayer) === 'number') {
          squares[(0, _aiFunctions.blockFork)(squares, humanPlayer)] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.takeCorner)(squares, humanPlayer) === 'number') {
          squares[(0, _aiFunctions.takeCorner)(squares, humanPlayer)] = AIPlayer;
          setBoard(squares);
        } else {
          squares[(0, _aiFunctions.takeOpen)(squares, humanPlayer)] = AIPlayer;
          setBoard(squares);
        }
      }

      //handle game where human takes edgeFirst
      if (this.state.gameType == 'edgeFirst') {
        squares[spaceTaken] = humanPlayer;
        if (count === 1 && (squares[3] === humanPlayer && squares[5] === humanPlayer || squares[1] === humanPlayer && squares[7] === humanPlayer)) {
          squares[0] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.win)(squares, humanPlayer, AIPlayer) === 'number') {
          squares[(0, _aiFunctions.win)(squares, humanPlayer, AIPlayer)] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.block)(squares, humanPlayer, AIPlayer) === 'number') {
          squares[(0, _aiFunctions.block)(squares, humanPlayer, AIPlayer)] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.blockFork)(squares, humanPlayer) === 'number') {
          squares[(0, _aiFunctions.blockFork)(squares, humanPlayer)] = AIPlayer;
          setBoard(squares);
        } else if (typeof (0, _aiFunctions.takeCorner)(squares, humanPlayer) === 'number') {
          squares[(0, _aiFunctions.takeCorner)(squares, humanPlayer)] = AIPlayer;
          setBoard(squares);
        } else {
          squares[(0, _aiFunctions.takeOpen)(squares, humanPlayer)] = AIPlayer;
          setBoard(squares);
        }
      }
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.setState({
        squares: Array(9).fill(null),
        currentPlayer: '',
        humanPlayer: '',
        AIPlayer: '',
        showPlayerChoice: true,
        moveCount: 0,
        gameType: '',
        winner: '',
        src: ''
      });
    }
  }, {
    key: 'onPlayerClick',
    value: function onPlayerClick(e) {
      var value = e.target.value;
      if (value === 'X') {
        this.setState({
          currentPlayer: 'X',
          humanPlayer: 'X',
          AIPlayer: 'O',
          showPlayerChoice: false
        });
      } else {
        this.setState({
          currentPlayer: 'O',
          humanPlayer: 'O',
          AIPlayer: 'X',
          showPlayerChoice: false
        });
      }
    }
  }, {
    key: 'renderChoosePlayer',
    value: function renderChoosePlayer() {
      var PlayerChoice = this.state.showPlayerChoice === true ? _jsx(_ChoosePlayer2.default, {
        animate: 'animated fadeInLeft',
        onClick: this.onPlayerClick
      }) : _ref;
      return PlayerChoice;
    }
  }, {
    key: 'renderCurrent',
    value: function renderCurrent() {
      var current = this.state.showPlayerChoice === false ? _jsx(_Player2.default, {
        animate: 'animated rubberBand',
        currentPlayer: this.state.currentPlayer,
        humanPlayer: this.state.humanPlayer,
        AIPlayer: this.state.AIPlayer
      }) : '';
      return current;
    }
  }, {
    key: 'renderSquare',
    value: function renderSquare(i) {
      var _this4 = this;

      var square = this.state.showPlayerChoice === false ? _jsx(_Square2.default, {
        animate: 'animated rollIn',
        value: this.state.squares[i],
        onClick: function onClick() {
          return _this4.handleClick(i);
        }
      }) : '';
      return square;
    }
  }, {
    key: 'renderReplay',
    value: function renderReplay() {
      var replay = this.state.showPlayerChoice === false ? _jsx(_Replay2.default, {
        reset: this.reset,
        animate: 'animated fadeIn'
      }) : '';
      return replay;
    }
  }, {
    key: 'renderModal',
    value: function renderModal() {
      var stuff = this.state.winner !== '' ? _jsx(_Modal2.default, {
        winner: this.state.winner,
        src: this.state.src
      }) : '';
      return stuff;
    }
  }, {
    key: 'render',
    value: function render() {
      return _jsx('div', {
        id: 'boardContainer',
        style: styles.boardContainer
      }, void 0, _jsx('div', {}, void 0, this.renderChoosePlayer()), _jsx('div', {
        style: styles.shiftUp
      }, void 0, this.renderCurrent(), this.renderModal(), _jsx('div', {
        style: styles.container
      }, void 0, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), _jsx('div', {
        style: styles.container
      }, void 0, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), _jsx('div', {
        style: styles.container
      }, void 0, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8))), this.renderReplay());
    }
  }]);

  return Board;
}(_react.Component);

exports.default = Board = (0, _radium2.default)(Board);